{"version":3,"names":["DELETE","BACKSPACE","isCollapsed","isEmpty","props","element","onKeyDown","event","keyCode","shiftKey","defaultPrevented","value","onMerge","onRemove","current","start","end","text","isReverse","hasActiveFormats","activeFormats","length","preventDefault","addEventListener","removeEventListener"],"sources":["@wordpress/block-editor/src/components/rich-text/event-listeners/delete.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { DELETE, BACKSPACE } from '@wordpress/keycodes';\nimport { isCollapsed, isEmpty } from '@wordpress/rich-text';\n\nexport default ( props ) => ( element ) => {\n\tfunction onKeyDown( event ) {\n\t\tconst { keyCode, shiftKey } = event;\n\n\t\tif ( event.defaultPrevented ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { value, onMerge, onRemove } = props.current;\n\n\t\tif ( keyCode === DELETE || keyCode === BACKSPACE ) {\n\t\t\tconst { start, end, text } = value;\n\t\t\tconst isReverse = keyCode === BACKSPACE;\n\t\t\tconst hasActiveFormats =\n\t\t\t\tvalue.activeFormats && !! value.activeFormats.length;\n\n\t\t\t// Only process delete if the key press occurs at an uncollapsed edge.\n\t\t\tif (\n\t\t\t\t! isCollapsed( value ) ||\n\t\t\t\thasActiveFormats ||\n\t\t\t\t( isReverse && start !== 0 ) ||\n\t\t\t\t( ! isReverse && end !== text.length )\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Exclude shift+backspace as they are shortcuts for deleting blocks.\n\t\t\tif ( shiftKey ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( onMerge ) {\n\t\t\t\tonMerge( ! isReverse );\n\t\t\t}\n\n\t\t\t// Only handle remove on Backspace. This serves dual-purpose of being\n\t\t\t// an intentional user interaction distinguishing between Backspace and\n\t\t\t// Delete to remove the empty field, but also to avoid merge & remove\n\t\t\t// causing destruction of two fields (merge, then removed merged).\n\t\t\telse if ( onRemove && isEmpty( value ) && isReverse ) {\n\t\t\t\tonRemove( ! isReverse );\n\t\t\t}\n\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n\n\telement.addEventListener( 'keydown', onKeyDown );\n\treturn () => {\n\t\telement.removeEventListener( 'keydown', onKeyDown );\n\t};\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,MAAM,EAAEC,SAAS,QAAQ,qBAAqB;AACvD,SAASC,WAAW,EAAEC,OAAO,QAAQ,sBAAsB;AAE3D,eAAiBC,KAAK,IAAQC,OAAO,IAAM;EAC1C,SAASC,SAASA,CAAEC,KAAK,EAAG;IAC3B,MAAM;MAAEC,OAAO;MAAEC;IAAS,CAAC,GAAGF,KAAK;IAEnC,IAAKA,KAAK,CAACG,gBAAgB,EAAG;MAC7B;IACD;IAEA,MAAM;MAAEC,KAAK;MAAEC,OAAO;MAAEC;IAAS,CAAC,GAAGT,KAAK,CAACU,OAAO;IAElD,IAAKN,OAAO,KAAKR,MAAM,IAAIQ,OAAO,KAAKP,SAAS,EAAG;MAClD,MAAM;QAAEc,KAAK;QAAEC,GAAG;QAAEC;MAAK,CAAC,GAAGN,KAAK;MAClC,MAAMO,SAAS,GAAGV,OAAO,KAAKP,SAAS;MACvC,MAAMkB,gBAAgB,GACrBR,KAAK,CAACS,aAAa,IAAI,CAAC,CAAET,KAAK,CAACS,aAAa,CAACC,MAAM;;MAErD;MACA,IACC,CAAEnB,WAAW,CAAES,KAAM,CAAC,IACtBQ,gBAAgB,IACdD,SAAS,IAAIH,KAAK,KAAK,CAAG,IAC1B,CAAEG,SAAS,IAAIF,GAAG,KAAKC,IAAI,CAACI,MAAQ,EACrC;QACD;MACD;;MAEA;MACA,IAAKZ,QAAQ,EAAG;QACf;MACD;MAEA,IAAKG,OAAO,EAAG;QACdA,OAAO,CAAE,CAAEM,SAAU,CAAC;MACvB;;MAEA;MACA;MACA;MACA;MAAA,KACK,IAAKL,QAAQ,IAAIV,OAAO,CAAEQ,KAAM,CAAC,IAAIO,SAAS,EAAG;QACrDL,QAAQ,CAAE,CAAEK,SAAU,CAAC;MACxB;MAEAX,KAAK,CAACe,cAAc,CAAC,CAAC;IACvB;EACD;EAEAjB,OAAO,CAACkB,gBAAgB,CAAE,SAAS,EAAEjB,SAAU,CAAC;EAChD,OAAO,MAAM;IACZD,OAAO,CAACmB,mBAAmB,CAAE,SAAS,EAAElB,SAAU,CAAC;EACpD,CAAC;AACF,CAAC","ignoreList":[]}