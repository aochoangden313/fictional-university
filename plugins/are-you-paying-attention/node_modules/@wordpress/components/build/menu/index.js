"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Menu = void 0;
var Ariakit = _interopRequireWildcard(require("@ariakit/react"));
var _element = require("@wordpress/element");
var _i18n = require("@wordpress/i18n");
var _context = require("../context");
var _context2 = require("./context");
var _item = require("./item");
var _checkboxItem = require("./checkbox-item");
var _radioItem = require("./radio-item");
var _group = require("./group");
var _groupLabel = require("./group-label");
var _separator = require("./separator");
var _itemLabel = require("./item-label");
var _itemHelpText = require("./item-help-text");
var _triggerButton = require("./trigger-button");
var _submenuTriggerItem = require("./submenu-trigger-item");
var _popover = require("./popover");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const UnconnectedMenu = props => {
  const {
    children,
    defaultOpen = false,
    open,
    onOpenChange,
    placement,
    // From internal components context
    variant
  } = (0, _context.useContextSystem)(props, 'Menu');
  const parentContext = (0, _element.useContext)(_context2.MenuContext);
  const rtl = (0, _i18n.isRTL)();

  // If an explicit value for the `placement` prop is not passed,
  // apply a default placement of `bottom-start` for the root menu popover,
  // and of `right-start` for nested menu popovers.
  let computedPlacement = placement !== null && placement !== void 0 ? placement : parentContext?.store ? 'right-start' : 'bottom-start';
  // Swap left/right in case of RTL direction
  if (rtl) {
    if (/right/.test(computedPlacement)) {
      computedPlacement = computedPlacement.replace('right', 'left');
    } else if (/left/.test(computedPlacement)) {
      computedPlacement = computedPlacement.replace('left', 'right');
    }
  }
  const menuStore = Ariakit.useMenuStore({
    parent: parentContext?.store,
    open,
    defaultOpen,
    placement: computedPlacement,
    focusLoop: true,
    setOpen(willBeOpen) {
      onOpenChange?.(willBeOpen);
    },
    rtl
  });
  const contextValue = (0, _element.useMemo)(() => ({
    store: menuStore,
    variant
  }), [menuStore, variant]);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_context2.MenuContext.Provider, {
    value: contextValue,
    children: children
  });
};
const Menu = exports.Menu = Object.assign((0, _context.contextConnectWithoutRef)(UnconnectedMenu, 'Menu'), {
  Context: Object.assign(_context2.MenuContext, {
    displayName: 'Menu.Context'
  }),
  Item: Object.assign(_item.MenuItem, {
    displayName: 'Menu.Item'
  }),
  RadioItem: Object.assign(_radioItem.MenuRadioItem, {
    displayName: 'Menu.RadioItem'
  }),
  CheckboxItem: Object.assign(_checkboxItem.MenuCheckboxItem, {
    displayName: 'Menu.CheckboxItem'
  }),
  Group: Object.assign(_group.MenuGroup, {
    displayName: 'Menu.Group'
  }),
  GroupLabel: Object.assign(_groupLabel.MenuGroupLabel, {
    displayName: 'Menu.GroupLabel'
  }),
  Separator: Object.assign(_separator.MenuSeparator, {
    displayName: 'Menu.Separator'
  }),
  ItemLabel: Object.assign(_itemLabel.MenuItemLabel, {
    displayName: 'Menu.ItemLabel'
  }),
  ItemHelpText: Object.assign(_itemHelpText.MenuItemHelpText, {
    displayName: 'Menu.ItemHelpText'
  }),
  Popover: Object.assign(_popover.MenuPopover, {
    displayName: 'Menu.Popover'
  }),
  TriggerButton: Object.assign(_triggerButton.MenuTriggerButton, {
    displayName: 'Menu.TriggerButton'
  }),
  SubmenuTriggerItem: Object.assign(_submenuTriggerItem.MenuSubmenuTriggerItem, {
    displayName: 'Menu.SubmenuTriggerItem'
  })
});
var _default = exports.default = Menu;
//# sourceMappingURL=index.js.map