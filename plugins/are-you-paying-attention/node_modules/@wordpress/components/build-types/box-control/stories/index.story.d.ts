/**
 * External dependencies
 */
import type { Meta } from '@storybook/react';
/**
 * Internal dependencies
 */
import BoxControl from '../';
declare const meta: Meta<typeof BoxControl>;
export default meta;
export declare const Default: import("@storybook/csf").AnnotatedStoryFn<import("@storybook/react").ReactRenderer, Pick<import("../../unit-control/types").UnitControlProps, "units"> & {
    onMouseOver?: import("../../unit-control/types").UnitControlProps["onMouseOver"];
    onMouseOut?: import("../../unit-control/types").UnitControlProps["onMouseOut"];
} & {
    allowReset?: boolean;
    id?: string;
    inputProps?: {
        hidden?: boolean | undefined | undefined;
        color?: string | undefined | undefined;
        content?: string | undefined | undefined;
        size?: import("../../input-control/types").Size | undefined;
        style?: import("react").CSSProperties | undefined;
        help?: import("react").ReactNode;
        height?: number | string | undefined | undefined;
        translate?: "yes" | "no" | undefined | undefined;
        width?: number | string | undefined | undefined;
        multiple?: boolean | undefined | undefined;
        disabled?: boolean | undefined;
        form?: string | undefined | undefined;
        slot?: string | undefined | undefined;
        title?: string | undefined | undefined;
        pattern?: string | undefined | undefined;
        suppressHydrationWarning?: boolean | undefined | undefined;
        className?: string | undefined | undefined;
        id?: string | undefined | undefined;
        lang?: string | undefined | undefined;
        max?: number | undefined;
        min?: number | undefined;
        name?: string | undefined | undefined;
        role?: import("react").AriaRole | undefined;
        tabIndex?: number | undefined | undefined;
        "aria-activedescendant"?: string | undefined | undefined;
        "aria-atomic"?: (boolean | "false" | "true") | undefined;
        "aria-autocomplete"?: "none" | "inline" | "list" | "both" | undefined | undefined;
        "aria-braillelabel"?: string | undefined | undefined;
        "aria-brailleroledescription"?: string | undefined | undefined;
        "aria-busy"?: (boolean | "false" | "true") | undefined;
        "aria-checked"?: boolean | "false" | "mixed" | "true" | undefined | undefined;
        "aria-colcount"?: number | undefined | undefined;
        "aria-colindex"?: number | undefined | undefined;
        "aria-colindextext"?: string | undefined | undefined;
        "aria-colspan"?: number | undefined | undefined;
        "aria-controls"?: string | undefined | undefined;
        "aria-current"?: boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time" | undefined | undefined;
        "aria-describedby"?: string | undefined | undefined;
        "aria-description"?: string | undefined | undefined;
        "aria-details"?: string | undefined | undefined;
        "aria-disabled"?: (boolean | "false" | "true") | undefined;
        "aria-dropeffect"?: "none" | "copy" | "execute" | "link" | "move" | "popup" | undefined | undefined;
        "aria-errormessage"?: string | undefined | undefined;
        "aria-expanded"?: (boolean | "false" | "true") | undefined;
        "aria-flowto"?: string | undefined | undefined;
        "aria-grabbed"?: (boolean | "false" | "true") | undefined;
        "aria-haspopup"?: boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog" | undefined | undefined;
        "aria-hidden"?: (boolean | "false" | "true") | undefined;
        "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined | undefined;
        "aria-keyshortcuts"?: string | undefined | undefined;
        "aria-label"?: string | undefined | undefined;
        "aria-labelledby"?: string | undefined | undefined;
        "aria-level"?: number | undefined | undefined;
        "aria-live"?: "off" | "assertive" | "polite" | undefined | undefined;
        "aria-modal"?: (boolean | "false" | "true") | undefined;
        "aria-multiline"?: (boolean | "false" | "true") | undefined;
        "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
        "aria-orientation"?: "horizontal" | "vertical" | undefined | undefined;
        "aria-owns"?: string | undefined | undefined;
        "aria-placeholder"?: string | undefined | undefined;
        "aria-posinset"?: number | undefined | undefined;
        "aria-pressed"?: boolean | "false" | "mixed" | "true" | undefined | undefined;
        "aria-readonly"?: (boolean | "false" | "true") | undefined;
        "aria-relevant"?: "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text" | "text additions" | "text removals" | undefined | undefined;
        "aria-required"?: (boolean | "false" | "true") | undefined;
        "aria-roledescription"?: string | undefined | undefined;
        "aria-rowcount"?: number | undefined | undefined;
        "aria-rowindex"?: number | undefined | undefined;
        "aria-rowindextext"?: string | undefined | undefined;
        "aria-rowspan"?: number | undefined | undefined;
        "aria-selected"?: (boolean | "false" | "true") | undefined;
        "aria-setsize"?: number | undefined | undefined;
        "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined | undefined;
        "aria-valuemax"?: number | undefined | undefined;
        "aria-valuemin"?: number | undefined | undefined;
        "aria-valuenow"?: number | undefined | undefined;
        "aria-valuetext"?: string | undefined | undefined;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
        onBlur?: (import("react").FocusEventHandler<HTMLInputElement> & import("react").FocusEventHandler<HTMLInputElement | HTMLSelectElement>) | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onResize?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onResizeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDrag?: ((dragProps: import("../../input-control/types").DragProps) => void) | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnd?: ((dragProps: import("../../input-control/types").DragProps) => void) | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragStart?: ((dragProps: import("../../input-control/types").DragProps) => void) | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOut?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOver?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLInputElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLInputElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLInputElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLInputElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLInputElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLInputElement> | undefined;
        key?: import("react").Key | null | undefined;
        defaultChecked?: boolean | undefined | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined | undefined;
        accessKey?: string | undefined | undefined;
        autoFocus?: boolean | undefined | undefined;
        contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
        contextMenu?: string | undefined | undefined;
        dir?: string | undefined | undefined;
        draggable?: (boolean | "false" | "true") | undefined;
        nonce?: string | undefined | undefined;
        spellCheck?: (boolean | "false" | "true") | undefined;
        radioGroup?: string | undefined | undefined;
        about?: string | undefined | undefined;
        datatype?: string | undefined | undefined;
        inlist?: any;
        prefix?: import("react").ReactNode;
        property?: string | undefined | undefined;
        rel?: string | undefined | undefined;
        resource?: string | undefined | undefined;
        rev?: string | undefined | undefined;
        typeof?: string | undefined | undefined;
        vocab?: string | undefined | undefined;
        autoCapitalize?: string | undefined | undefined;
        autoCorrect?: string | undefined | undefined;
        autoSave?: string | undefined | undefined;
        itemProp?: string | undefined | undefined;
        itemScope?: boolean | undefined | undefined;
        itemType?: string | undefined | undefined;
        itemID?: string | undefined | undefined;
        itemRef?: string | undefined | undefined;
        results?: number | undefined | undefined;
        security?: string | undefined | undefined;
        unselectable?: "on" | "off" | undefined | undefined;
        inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined | undefined;
        is?: string | undefined | undefined;
        formAction?: string | undefined;
        formEncType?: string | undefined | undefined;
        formMethod?: string | undefined | undefined;
        formNoValidate?: boolean | undefined | undefined;
        formTarget?: string | undefined | undefined;
        value?: number | string | undefined;
        autoComplete?: import("react").HTMLInputAutoCompleteAttribute | undefined;
        maxLength?: number | undefined | undefined;
        minLength?: number | undefined | undefined;
        placeholder?: string | undefined | undefined;
        readOnly?: boolean | undefined | undefined;
        required?: boolean | undefined;
        src?: string | undefined | undefined;
        alt?: string | undefined | undefined;
        accept?: string | undefined | undefined;
        capture?: boolean | "user" | "environment" | undefined | undefined;
        checked?: boolean | undefined | undefined;
        enterKeyHint?: "enter" | "done" | "go" | "next" | "previous" | "search" | "send" | undefined | undefined;
        list?: string | undefined | undefined;
        step?: string | number | undefined;
        onValidate?: ((nextValue: string, event?: import("react").SyntheticEvent<HTMLInputElement>) => void) | undefined;
        __next36pxDefaultSize?: boolean | undefined;
        __next40pxDefaultSize?: boolean | undefined;
        __shouldNotWarnDeprecated36pxSize?: boolean | undefined;
        __unstableInputWidth?: import("csstype").Property.Width<string | number> | undefined;
        hideLabelFromVision?: boolean | undefined;
        labelPosition?: import("../../input-control/types").LabelPosition | undefined;
        dragDirection?: import("../../input-control/types").DragDirection | undefined;
        dragThreshold?: number | undefined;
        isDragEnabled?: boolean | undefined;
        isPressEnterToChange?: boolean | undefined;
        __unstableStateReducer?: import("../../input-control/reducer/state").StateReducer | undefined;
        hideHTMLArrows?: boolean | undefined;
        isShiftStepEnabled?: boolean | undefined;
        shiftStep?: number | undefined;
        spinFactor?: number | undefined;
        disableUnits?: boolean | undefined;
        unit?: string | undefined;
        isUnitSelectTabbable?: boolean | undefined;
        isResetValueOnUnitChange?: boolean | undefined;
        onUnitChange?: import("../../unit-control/types").UnitControlOnChangeCallback | undefined;
    };
    label?: string;
    onChange: (next: import("../types").BoxControlValue) => void;
    resetValues?: import("../types").BoxControlValue;
    sides?: readonly (keyof import("../types").BoxControlValue | "horizontal" | "vertical")[];
    splitOnAxis?: boolean;
    values?: import("../types").BoxControlValue;
    __next40pxDefaultSize?: boolean;
    presets?: import("../types").Preset[];
    presetKey?: string;
}>;
export declare const Controlled: import("@storybook/csf").AnnotatedStoryFn<import("@storybook/react").ReactRenderer, Pick<import("../../unit-control/types").UnitControlProps, "units"> & {
    onMouseOver?: import("../../unit-control/types").UnitControlProps["onMouseOver"];
    onMouseOut?: import("../../unit-control/types").UnitControlProps["onMouseOut"];
} & {
    allowReset?: boolean;
    id?: string;
    inputProps?: {
        hidden?: boolean | undefined | undefined;
        color?: string | undefined | undefined;
        content?: string | undefined | undefined;
        size?: import("../../input-control/types").Size | undefined;
        style?: import("react").CSSProperties | undefined;
        help?: import("react").ReactNode;
        height?: number | string | undefined | undefined;
        translate?: "yes" | "no" | undefined | undefined;
        width?: number | string | undefined | undefined;
        multiple?: boolean | undefined | undefined;
        disabled?: boolean | undefined;
        form?: string | undefined | undefined;
        slot?: string | undefined | undefined;
        title?: string | undefined | undefined;
        pattern?: string | undefined | undefined;
        suppressHydrationWarning?: boolean | undefined | undefined;
        className?: string | undefined | undefined;
        id?: string | undefined | undefined;
        lang?: string | undefined | undefined;
        max?: number | undefined;
        min?: number | undefined;
        name?: string | undefined | undefined;
        role?: import("react").AriaRole | undefined;
        tabIndex?: number | undefined | undefined;
        "aria-activedescendant"?: string | undefined | undefined;
        "aria-atomic"?: (boolean | "false" | "true") | undefined;
        "aria-autocomplete"?: "none" | "inline" | "list" | "both" | undefined | undefined;
        "aria-braillelabel"?: string | undefined | undefined;
        "aria-brailleroledescription"?: string | undefined | undefined;
        "aria-busy"?: (boolean | "false" | "true") | undefined;
        "aria-checked"?: boolean | "false" | "mixed" | "true" | undefined | undefined;
        "aria-colcount"?: number | undefined | undefined;
        "aria-colindex"?: number | undefined | undefined;
        "aria-colindextext"?: string | undefined | undefined;
        "aria-colspan"?: number | undefined | undefined;
        "aria-controls"?: string | undefined | undefined;
        "aria-current"?: boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time" | undefined | undefined;
        "aria-describedby"?: string | undefined | undefined;
        "aria-description"?: string | undefined | undefined;
        "aria-details"?: string | undefined | undefined;
        "aria-disabled"?: (boolean | "false" | "true") | undefined;
        "aria-dropeffect"?: "none" | "copy" | "execute" | "link" | "move" | "popup" | undefined | undefined;
        "aria-errormessage"?: string | undefined | undefined;
        "aria-expanded"?: (boolean | "false" | "true") | undefined;
        "aria-flowto"?: string | undefined | undefined;
        "aria-grabbed"?: (boolean | "false" | "true") | undefined;
        "aria-haspopup"?: boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog" | undefined | undefined;
        "aria-hidden"?: (boolean | "false" | "true") | undefined;
        "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined | undefined;
        "aria-keyshortcuts"?: string | undefined | undefined;
        "aria-label"?: string | undefined | undefined;
        "aria-labelledby"?: string | undefined | undefined;
        "aria-level"?: number | undefined | undefined;
        "aria-live"?: "off" | "assertive" | "polite" | undefined | undefined;
        "aria-modal"?: (boolean | "false" | "true") | undefined;
        "aria-multiline"?: (boolean | "false" | "true") | undefined;
        "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
        "aria-orientation"?: "horizontal" | "vertical" | undefined | undefined;
        "aria-owns"?: string | undefined | undefined;
        "aria-placeholder"?: string | undefined | undefined;
        "aria-posinset"?: number | undefined | undefined;
        "aria-pressed"?: boolean | "false" | "mixed" | "true" | undefined | undefined;
        "aria-readonly"?: (boolean | "false" | "true") | undefined;
        "aria-relevant"?: "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text" | "text additions" | "text removals" | undefined | undefined;
        "aria-required"?: (boolean | "false" | "true") | undefined;
        "aria-roledescription"?: string | undefined | undefined;
        "aria-rowcount"?: number | undefined | undefined;
        "aria-rowindex"?: number | undefined | undefined;
        "aria-rowindextext"?: string | undefined | undefined;
        "aria-rowspan"?: number | undefined | undefined;
        "aria-selected"?: (boolean | "false" | "true") | undefined;
        "aria-setsize"?: number | undefined | undefined;
        "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined | undefined;
        "aria-valuemax"?: number | undefined | undefined;
        "aria-valuemin"?: number | undefined | undefined;
        "aria-valuenow"?: number | undefined | undefined;
        "aria-valuetext"?: string | undefined | undefined;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
        onBlur?: (import("react").FocusEventHandler<HTMLInputElement> & import("react").FocusEventHandler<HTMLInputElement | HTMLSelectElement>) | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onResize?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onResizeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDrag?: ((dragProps: import("../../input-control/types").DragProps) => void) | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnd?: ((dragProps: import("../../input-control/types").DragProps) => void) | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragStart?: ((dragProps: import("../../input-control/types").DragProps) => void) | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOut?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOver?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLInputElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLInputElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLInputElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLInputElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLInputElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLInputElement> | undefined;
        key?: import("react").Key | null | undefined;
        defaultChecked?: boolean | undefined | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined | undefined;
        accessKey?: string | undefined | undefined;
        autoFocus?: boolean | undefined | undefined;
        contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
        contextMenu?: string | undefined | undefined;
        dir?: string | undefined | undefined;
        draggable?: (boolean | "false" | "true") | undefined;
        nonce?: string | undefined | undefined;
        spellCheck?: (boolean | "false" | "true") | undefined;
        radioGroup?: string | undefined | undefined;
        about?: string | undefined | undefined;
        datatype?: string | undefined | undefined;
        inlist?: any;
        prefix?: import("react").ReactNode;
        property?: string | undefined | undefined;
        rel?: string | undefined | undefined;
        resource?: string | undefined | undefined;
        rev?: string | undefined | undefined;
        typeof?: string | undefined | undefined;
        vocab?: string | undefined | undefined;
        autoCapitalize?: string | undefined | undefined;
        autoCorrect?: string | undefined | undefined;
        autoSave?: string | undefined | undefined;
        itemProp?: string | undefined | undefined;
        itemScope?: boolean | undefined | undefined;
        itemType?: string | undefined | undefined;
        itemID?: string | undefined | undefined;
        itemRef?: string | undefined | undefined;
        results?: number | undefined | undefined;
        security?: string | undefined | undefined;
        unselectable?: "on" | "off" | undefined | undefined;
        inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined | undefined;
        is?: string | undefined | undefined;
        formAction?: string | undefined;
        formEncType?: string | undefined | undefined;
        formMethod?: string | undefined | undefined;
        formNoValidate?: boolean | undefined | undefined;
        formTarget?: string | undefined | undefined;
        value?: number | string | undefined;
        autoComplete?: import("react").HTMLInputAutoCompleteAttribute | undefined;
        maxLength?: number | undefined | undefined;
        minLength?: number | undefined | undefined;
        placeholder?: string | undefined | undefined;
        readOnly?: boolean | undefined | undefined;
        required?: boolean | undefined;
        src?: string | undefined | undefined;
        alt?: string | undefined | undefined;
        accept?: string | undefined | undefined;
        capture?: boolean | "user" | "environment" | undefined | undefined;
        checked?: boolean | undefined | undefined;
        enterKeyHint?: "enter" | "done" | "go" | "next" | "previous" | "search" | "send" | undefined | undefined;
        list?: string | undefined | undefined;
        step?: string | number | undefined;
        onValidate?: ((nextValue: string, event?: import("react").SyntheticEvent<HTMLInputElement>) => void) | undefined;
        __next36pxDefaultSize?: boolean | undefined;
        __next40pxDefaultSize?: boolean | undefined;
        __shouldNotWarnDeprecated36pxSize?: boolean | undefined;
        __unstableInputWidth?: import("csstype").Property.Width<string | number> | undefined;
        hideLabelFromVision?: boolean | undefined;
        labelPosition?: import("../../input-control/types").LabelPosition | undefined;
        dragDirection?: import("../../input-control/types").DragDirection | undefined;
        dragThreshold?: number | undefined;
        isDragEnabled?: boolean | undefined;
        isPressEnterToChange?: boolean | undefined;
        __unstableStateReducer?: import("../../input-control/reducer/state").StateReducer | undefined;
        hideHTMLArrows?: boolean | undefined;
        isShiftStepEnabled?: boolean | undefined;
        shiftStep?: number | undefined;
        spinFactor?: number | undefined;
        disableUnits?: boolean | undefined;
        unit?: string | undefined;
        isUnitSelectTabbable?: boolean | undefined;
        isResetValueOnUnitChange?: boolean | undefined;
        onUnitChange?: import("../../unit-control/types").UnitControlOnChangeCallback | undefined;
    };
    label?: string;
    onChange: (next: import("../types").BoxControlValue) => void;
    resetValues?: import("../types").BoxControlValue;
    sides?: readonly (keyof import("../types").BoxControlValue | "horizontal" | "vertical")[];
    splitOnAxis?: boolean;
    values?: import("../types").BoxControlValue;
    __next40pxDefaultSize?: boolean;
    presets?: import("../types").Preset[];
    presetKey?: string;
}>;
export declare const ArbitrarySides: import("@storybook/csf").AnnotatedStoryFn<import("@storybook/react").ReactRenderer, Pick<import("../../unit-control/types").UnitControlProps, "units"> & {
    onMouseOver?: import("../../unit-control/types").UnitControlProps["onMouseOver"];
    onMouseOut?: import("../../unit-control/types").UnitControlProps["onMouseOut"];
} & {
    allowReset?: boolean;
    id?: string;
    inputProps?: {
        hidden?: boolean | undefined | undefined;
        color?: string | undefined | undefined;
        content?: string | undefined | undefined;
        size?: import("../../input-control/types").Size | undefined;
        style?: import("react").CSSProperties | undefined;
        help?: import("react").ReactNode;
        height?: number | string | undefined | undefined;
        translate?: "yes" | "no" | undefined | undefined;
        width?: number | string | undefined | undefined;
        multiple?: boolean | undefined | undefined;
        disabled?: boolean | undefined;
        form?: string | undefined | undefined;
        slot?: string | undefined | undefined;
        title?: string | undefined | undefined;
        pattern?: string | undefined | undefined;
        suppressHydrationWarning?: boolean | undefined | undefined;
        className?: string | undefined | undefined;
        id?: string | undefined | undefined;
        lang?: string | undefined | undefined;
        max?: number | undefined;
        min?: number | undefined;
        name?: string | undefined | undefined;
        role?: import("react").AriaRole | undefined;
        tabIndex?: number | undefined | undefined;
        "aria-activedescendant"?: string | undefined | undefined;
        "aria-atomic"?: (boolean | "false" | "true") | undefined;
        "aria-autocomplete"?: "none" | "inline" | "list" | "both" | undefined | undefined;
        "aria-braillelabel"?: string | undefined | undefined;
        "aria-brailleroledescription"?: string | undefined | undefined;
        "aria-busy"?: (boolean | "false" | "true") | undefined;
        "aria-checked"?: boolean | "false" | "mixed" | "true" | undefined | undefined;
        "aria-colcount"?: number | undefined | undefined;
        "aria-colindex"?: number | undefined | undefined;
        "aria-colindextext"?: string | undefined | undefined;
        "aria-colspan"?: number | undefined | undefined;
        "aria-controls"?: string | undefined | undefined;
        "aria-current"?: boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time" | undefined | undefined;
        "aria-describedby"?: string | undefined | undefined;
        "aria-description"?: string | undefined | undefined;
        "aria-details"?: string | undefined | undefined;
        "aria-disabled"?: (boolean | "false" | "true") | undefined;
        "aria-dropeffect"?: "none" | "copy" | "execute" | "link" | "move" | "popup" | undefined | undefined;
        "aria-errormessage"?: string | undefined | undefined;
        "aria-expanded"?: (boolean | "false" | "true") | undefined;
        "aria-flowto"?: string | undefined | undefined;
        "aria-grabbed"?: (boolean | "false" | "true") | undefined;
        "aria-haspopup"?: boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog" | undefined | undefined;
        "aria-hidden"?: (boolean | "false" | "true") | undefined;
        "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined | undefined;
        "aria-keyshortcuts"?: string | undefined | undefined;
        "aria-label"?: string | undefined | undefined;
        "aria-labelledby"?: string | undefined | undefined;
        "aria-level"?: number | undefined | undefined;
        "aria-live"?: "off" | "assertive" | "polite" | undefined | undefined;
        "aria-modal"?: (boolean | "false" | "true") | undefined;
        "aria-multiline"?: (boolean | "false" | "true") | undefined;
        "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
        "aria-orientation"?: "horizontal" | "vertical" | undefined | undefined;
        "aria-owns"?: string | undefined | undefined;
        "aria-placeholder"?: string | undefined | undefined;
        "aria-posinset"?: number | undefined | undefined;
        "aria-pressed"?: boolean | "false" | "mixed" | "true" | undefined | undefined;
        "aria-readonly"?: (boolean | "false" | "true") | undefined;
        "aria-relevant"?: "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text" | "text additions" | "text removals" | undefined | undefined;
        "aria-required"?: (boolean | "false" | "true") | undefined;
        "aria-roledescription"?: string | undefined | undefined;
        "aria-rowcount"?: number | undefined | undefined;
        "aria-rowindex"?: number | undefined | undefined;
        "aria-rowindextext"?: string | undefined | undefined;
        "aria-rowspan"?: number | undefined | undefined;
        "aria-selected"?: (boolean | "false" | "true") | undefined;
        "aria-setsize"?: number | undefined | undefined;
        "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined | undefined;
        "aria-valuemax"?: number | undefined | undefined;
        "aria-valuemin"?: number | undefined | undefined;
        "aria-valuenow"?: number | undefined | undefined;
        "aria-valuetext"?: string | undefined | undefined;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
        onBlur?: (import("react").FocusEventHandler<HTMLInputElement> & import("react").FocusEventHandler<HTMLInputElement | HTMLSelectElement>) | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onResize?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onResizeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDrag?: ((dragProps: import("../../input-control/types").DragProps) => void) | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnd?: ((dragProps: import("../../input-control/types").DragProps) => void) | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragStart?: ((dragProps: import("../../input-control/types").DragProps) => void) | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOut?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOver?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLInputElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLInputElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLInputElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLInputElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLInputElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLInputElement> | undefined;
        key?: import("react").Key | null | undefined;
        defaultChecked?: boolean | undefined | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined | undefined;
        accessKey?: string | undefined | undefined;
        autoFocus?: boolean | undefined | undefined;
        contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
        contextMenu?: string | undefined | undefined;
        dir?: string | undefined | undefined;
        draggable?: (boolean | "false" | "true") | undefined;
        nonce?: string | undefined | undefined;
        spellCheck?: (boolean | "false" | "true") | undefined;
        radioGroup?: string | undefined | undefined;
        about?: string | undefined | undefined;
        datatype?: string | undefined | undefined;
        inlist?: any;
        prefix?: import("react").ReactNode;
        property?: string | undefined | undefined;
        rel?: string | undefined | undefined;
        resource?: string | undefined | undefined;
        rev?: string | undefined | undefined;
        typeof?: string | undefined | undefined;
        vocab?: string | undefined | undefined;
        autoCapitalize?: string | undefined | undefined;
        autoCorrect?: string | undefined | undefined;
        autoSave?: string | undefined | undefined;
        itemProp?: string | undefined | undefined;
        itemScope?: boolean | undefined | undefined;
        itemType?: string | undefined | undefined;
        itemID?: string | undefined | undefined;
        itemRef?: string | undefined | undefined;
        results?: number | undefined | undefined;
        security?: string | undefined | undefined;
        unselectable?: "on" | "off" | undefined | undefined;
        inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined | undefined;
        is?: string | undefined | undefined;
        formAction?: string | undefined;
        formEncType?: string | undefined | undefined;
        formMethod?: string | undefined | undefined;
        formNoValidate?: boolean | undefined | undefined;
        formTarget?: string | undefined | undefined;
        value?: number | string | undefined;
        autoComplete?: import("react").HTMLInputAutoCompleteAttribute | undefined;
        maxLength?: number | undefined | undefined;
        minLength?: number | undefined | undefined;
        placeholder?: string | undefined | undefined;
        readOnly?: boolean | undefined | undefined;
        required?: boolean | undefined;
        src?: string | undefined | undefined;
        alt?: string | undefined | undefined;
        accept?: string | undefined | undefined;
        capture?: boolean | "user" | "environment" | undefined | undefined;
        checked?: boolean | undefined | undefined;
        enterKeyHint?: "enter" | "done" | "go" | "next" | "previous" | "search" | "send" | undefined | undefined;
        list?: string | undefined | undefined;
        step?: string | number | undefined;
        onValidate?: ((nextValue: string, event?: import("react").SyntheticEvent<HTMLInputElement>) => void) | undefined;
        __next36pxDefaultSize?: boolean | undefined;
        __next40pxDefaultSize?: boolean | undefined;
        __shouldNotWarnDeprecated36pxSize?: boolean | undefined;
        __unstableInputWidth?: import("csstype").Property.Width<string | number> | undefined;
        hideLabelFromVision?: boolean | undefined;
        labelPosition?: import("../../input-control/types").LabelPosition | undefined;
        dragDirection?: import("../../input-control/types").DragDirection | undefined;
        dragThreshold?: number | undefined;
        isDragEnabled?: boolean | undefined;
        isPressEnterToChange?: boolean | undefined;
        __unstableStateReducer?: import("../../input-control/reducer/state").StateReducer | undefined;
        hideHTMLArrows?: boolean | undefined;
        isShiftStepEnabled?: boolean | undefined;
        shiftStep?: number | undefined;
        spinFactor?: number | undefined;
        disableUnits?: boolean | undefined;
        unit?: string | undefined;
        isUnitSelectTabbable?: boolean | undefined;
        isResetValueOnUnitChange?: boolean | undefined;
        onUnitChange?: import("../../unit-control/types").UnitControlOnChangeCallback | undefined;
    };
    label?: string;
    onChange: (next: import("../types").BoxControlValue) => void;
    resetValues?: import("../types").BoxControlValue;
    sides?: readonly (keyof import("../types").BoxControlValue | "horizontal" | "vertical")[];
    splitOnAxis?: boolean;
    values?: import("../types").BoxControlValue;
    __next40pxDefaultSize?: boolean;
    presets?: import("../types").Preset[];
    presetKey?: string;
}>;
export declare const SingleSide: import("@storybook/csf").AnnotatedStoryFn<import("@storybook/react").ReactRenderer, Pick<import("../../unit-control/types").UnitControlProps, "units"> & {
    onMouseOver?: import("../../unit-control/types").UnitControlProps["onMouseOver"];
    onMouseOut?: import("../../unit-control/types").UnitControlProps["onMouseOut"];
} & {
    allowReset?: boolean;
    id?: string;
    inputProps?: {
        hidden?: boolean | undefined | undefined;
        color?: string | undefined | undefined;
        content?: string | undefined | undefined;
        size?: import("../../input-control/types").Size | undefined;
        style?: import("react").CSSProperties | undefined;
        help?: import("react").ReactNode;
        height?: number | string | undefined | undefined;
        translate?: "yes" | "no" | undefined | undefined;
        width?: number | string | undefined | undefined;
        multiple?: boolean | undefined | undefined;
        disabled?: boolean | undefined;
        form?: string | undefined | undefined;
        slot?: string | undefined | undefined;
        title?: string | undefined | undefined;
        pattern?: string | undefined | undefined;
        suppressHydrationWarning?: boolean | undefined | undefined;
        className?: string | undefined | undefined;
        id?: string | undefined | undefined;
        lang?: string | undefined | undefined;
        max?: number | undefined;
        min?: number | undefined;
        name?: string | undefined | undefined;
        role?: import("react").AriaRole | undefined;
        tabIndex?: number | undefined | undefined;
        "aria-activedescendant"?: string | undefined | undefined;
        "aria-atomic"?: (boolean | "false" | "true") | undefined;
        "aria-autocomplete"?: "none" | "inline" | "list" | "both" | undefined | undefined;
        "aria-braillelabel"?: string | undefined | undefined;
        "aria-brailleroledescription"?: string | undefined | undefined;
        "aria-busy"?: (boolean | "false" | "true") | undefined;
        "aria-checked"?: boolean | "false" | "mixed" | "true" | undefined | undefined;
        "aria-colcount"?: number | undefined | undefined;
        "aria-colindex"?: number | undefined | undefined;
        "aria-colindextext"?: string | undefined | undefined;
        "aria-colspan"?: number | undefined | undefined;
        "aria-controls"?: string | undefined | undefined;
        "aria-current"?: boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time" | undefined | undefined;
        "aria-describedby"?: string | undefined | undefined;
        "aria-description"?: string | undefined | undefined;
        "aria-details"?: string | undefined | undefined;
        "aria-disabled"?: (boolean | "false" | "true") | undefined;
        "aria-dropeffect"?: "none" | "copy" | "execute" | "link" | "move" | "popup" | undefined | undefined;
        "aria-errormessage"?: string | undefined | undefined;
        "aria-expanded"?: (boolean | "false" | "true") | undefined;
        "aria-flowto"?: string | undefined | undefined;
        "aria-grabbed"?: (boolean | "false" | "true") | undefined;
        "aria-haspopup"?: boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog" | undefined | undefined;
        "aria-hidden"?: (boolean | "false" | "true") | undefined;
        "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined | undefined;
        "aria-keyshortcuts"?: string | undefined | undefined;
        "aria-label"?: string | undefined | undefined;
        "aria-labelledby"?: string | undefined | undefined;
        "aria-level"?: number | undefined | undefined;
        "aria-live"?: "off" | "assertive" | "polite" | undefined | undefined;
        "aria-modal"?: (boolean | "false" | "true") | undefined;
        "aria-multiline"?: (boolean | "false" | "true") | undefined;
        "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
        "aria-orientation"?: "horizontal" | "vertical" | undefined | undefined;
        "aria-owns"?: string | undefined | undefined;
        "aria-placeholder"?: string | undefined | undefined;
        "aria-posinset"?: number | undefined | undefined;
        "aria-pressed"?: boolean | "false" | "mixed" | "true" | undefined | undefined;
        "aria-readonly"?: (boolean | "false" | "true") | undefined;
        "aria-relevant"?: "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text" | "text additions" | "text removals" | undefined | undefined;
        "aria-required"?: (boolean | "false" | "true") | undefined;
        "aria-roledescription"?: string | undefined | undefined;
        "aria-rowcount"?: number | undefined | undefined;
        "aria-rowindex"?: number | undefined | undefined;
        "aria-rowindextext"?: string | undefined | undefined;
        "aria-rowspan"?: number | undefined | undefined;
        "aria-selected"?: (boolean | "false" | "true") | undefined;
        "aria-setsize"?: number | undefined | undefined;
        "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined | undefined;
        "aria-valuemax"?: number | undefined | undefined;
        "aria-valuemin"?: number | undefined | undefined;
        "aria-valuenow"?: number | undefined | undefined;
        "aria-valuetext"?: string | undefined | undefined;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
        onBlur?: (import("react").FocusEventHandler<HTMLInputElement> & import("react").FocusEventHandler<HTMLInputElement | HTMLSelectElement>) | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onResize?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onResizeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDrag?: ((dragProps: import("../../input-control/types").DragProps) => void) | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnd?: ((dragProps: import("../../input-control/types").DragProps) => void) | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragStart?: ((dragProps: import("../../input-control/types").DragProps) => void) | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOut?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOver?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLInputElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLInputElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLInputElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLInputElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLInputElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLInputElement> | undefined;
        key?: import("react").Key | null | undefined;
        defaultChecked?: boolean | undefined | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined | undefined;
        accessKey?: string | undefined | undefined;
        autoFocus?: boolean | undefined | undefined;
        contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
        contextMenu?: string | undefined | undefined;
        dir?: string | undefined | undefined;
        draggable?: (boolean | "false" | "true") | undefined;
        nonce?: string | undefined | undefined;
        spellCheck?: (boolean | "false" | "true") | undefined;
        radioGroup?: string | undefined | undefined;
        about?: string | undefined | undefined;
        datatype?: string | undefined | undefined;
        inlist?: any;
        prefix?: import("react").ReactNode;
        property?: string | undefined | undefined;
        rel?: string | undefined | undefined;
        resource?: string | undefined | undefined;
        rev?: string | undefined | undefined;
        typeof?: string | undefined | undefined;
        vocab?: string | undefined | undefined;
        autoCapitalize?: string | undefined | undefined;
        autoCorrect?: string | undefined | undefined;
        autoSave?: string | undefined | undefined;
        itemProp?: string | undefined | undefined;
        itemScope?: boolean | undefined | undefined;
        itemType?: string | undefined | undefined;
        itemID?: string | undefined | undefined;
        itemRef?: string | undefined | undefined;
        results?: number | undefined | undefined;
        security?: string | undefined | undefined;
        unselectable?: "on" | "off" | undefined | undefined;
        inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined | undefined;
        is?: string | undefined | undefined;
        formAction?: string | undefined;
        formEncType?: string | undefined | undefined;
        formMethod?: string | undefined | undefined;
        formNoValidate?: boolean | undefined | undefined;
        formTarget?: string | undefined | undefined;
        value?: number | string | undefined;
        autoComplete?: import("react").HTMLInputAutoCompleteAttribute | undefined;
        maxLength?: number | undefined | undefined;
        minLength?: number | undefined | undefined;
        placeholder?: string | undefined | undefined;
        readOnly?: boolean | undefined | undefined;
        required?: boolean | undefined;
        src?: string | undefined | undefined;
        alt?: string | undefined | undefined;
        accept?: string | undefined | undefined;
        capture?: boolean | "user" | "environment" | undefined | undefined;
        checked?: boolean | undefined | undefined;
        enterKeyHint?: "enter" | "done" | "go" | "next" | "previous" | "search" | "send" | undefined | undefined;
        list?: string | undefined | undefined;
        step?: string | number | undefined;
        onValidate?: ((nextValue: string, event?: import("react").SyntheticEvent<HTMLInputElement>) => void) | undefined;
        __next36pxDefaultSize?: boolean | undefined;
        __next40pxDefaultSize?: boolean | undefined;
        __shouldNotWarnDeprecated36pxSize?: boolean | undefined;
        __unstableInputWidth?: import("csstype").Property.Width<string | number> | undefined;
        hideLabelFromVision?: boolean | undefined;
        labelPosition?: import("../../input-control/types").LabelPosition | undefined;
        dragDirection?: import("../../input-control/types").DragDirection | undefined;
        dragThreshold?: number | undefined;
        isDragEnabled?: boolean | undefined;
        isPressEnterToChange?: boolean | undefined;
        __unstableStateReducer?: import("../../input-control/reducer/state").StateReducer | undefined;
        hideHTMLArrows?: boolean | undefined;
        isShiftStepEnabled?: boolean | undefined;
        shiftStep?: number | undefined;
        spinFactor?: number | undefined;
        disableUnits?: boolean | undefined;
        unit?: string | undefined;
        isUnitSelectTabbable?: boolean | undefined;
        isResetValueOnUnitChange?: boolean | undefined;
        onUnitChange?: import("../../unit-control/types").UnitControlOnChangeCallback | undefined;
    };
    label?: string;
    onChange: (next: import("../types").BoxControlValue) => void;
    resetValues?: import("../types").BoxControlValue;
    sides?: readonly (keyof import("../types").BoxControlValue | "horizontal" | "vertical")[];
    splitOnAxis?: boolean;
    values?: import("../types").BoxControlValue;
    __next40pxDefaultSize?: boolean;
    presets?: import("../types").Preset[];
    presetKey?: string;
}>;
export declare const AxialControls: import("@storybook/csf").AnnotatedStoryFn<import("@storybook/react").ReactRenderer, Pick<import("../../unit-control/types").UnitControlProps, "units"> & {
    onMouseOver?: import("../../unit-control/types").UnitControlProps["onMouseOver"];
    onMouseOut?: import("../../unit-control/types").UnitControlProps["onMouseOut"];
} & {
    allowReset?: boolean;
    id?: string;
    inputProps?: {
        hidden?: boolean | undefined | undefined;
        color?: string | undefined | undefined;
        content?: string | undefined | undefined;
        size?: import("../../input-control/types").Size | undefined;
        style?: import("react").CSSProperties | undefined;
        help?: import("react").ReactNode;
        height?: number | string | undefined | undefined;
        translate?: "yes" | "no" | undefined | undefined;
        width?: number | string | undefined | undefined;
        multiple?: boolean | undefined | undefined;
        disabled?: boolean | undefined;
        form?: string | undefined | undefined;
        slot?: string | undefined | undefined;
        title?: string | undefined | undefined;
        pattern?: string | undefined | undefined;
        suppressHydrationWarning?: boolean | undefined | undefined;
        className?: string | undefined | undefined;
        id?: string | undefined | undefined;
        lang?: string | undefined | undefined;
        max?: number | undefined;
        min?: number | undefined;
        name?: string | undefined | undefined;
        role?: import("react").AriaRole | undefined;
        tabIndex?: number | undefined | undefined;
        "aria-activedescendant"?: string | undefined | undefined;
        "aria-atomic"?: (boolean | "false" | "true") | undefined;
        "aria-autocomplete"?: "none" | "inline" | "list" | "both" | undefined | undefined;
        "aria-braillelabel"?: string | undefined | undefined;
        "aria-brailleroledescription"?: string | undefined | undefined;
        "aria-busy"?: (boolean | "false" | "true") | undefined;
        "aria-checked"?: boolean | "false" | "mixed" | "true" | undefined | undefined;
        "aria-colcount"?: number | undefined | undefined;
        "aria-colindex"?: number | undefined | undefined;
        "aria-colindextext"?: string | undefined | undefined;
        "aria-colspan"?: number | undefined | undefined;
        "aria-controls"?: string | undefined | undefined;
        "aria-current"?: boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time" | undefined | undefined;
        "aria-describedby"?: string | undefined | undefined;
        "aria-description"?: string | undefined | undefined;
        "aria-details"?: string | undefined | undefined;
        "aria-disabled"?: (boolean | "false" | "true") | undefined;
        "aria-dropeffect"?: "none" | "copy" | "execute" | "link" | "move" | "popup" | undefined | undefined;
        "aria-errormessage"?: string | undefined | undefined;
        "aria-expanded"?: (boolean | "false" | "true") | undefined;
        "aria-flowto"?: string | undefined | undefined;
        "aria-grabbed"?: (boolean | "false" | "true") | undefined;
        "aria-haspopup"?: boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog" | undefined | undefined;
        "aria-hidden"?: (boolean | "false" | "true") | undefined;
        "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined | undefined;
        "aria-keyshortcuts"?: string | undefined | undefined;
        "aria-label"?: string | undefined | undefined;
        "aria-labelledby"?: string | undefined | undefined;
        "aria-level"?: number | undefined | undefined;
        "aria-live"?: "off" | "assertive" | "polite" | undefined | undefined;
        "aria-modal"?: (boolean | "false" | "true") | undefined;
        "aria-multiline"?: (boolean | "false" | "true") | undefined;
        "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
        "aria-orientation"?: "horizontal" | "vertical" | undefined | undefined;
        "aria-owns"?: string | undefined | undefined;
        "aria-placeholder"?: string | undefined | undefined;
        "aria-posinset"?: number | undefined | undefined;
        "aria-pressed"?: boolean | "false" | "mixed" | "true" | undefined | undefined;
        "aria-readonly"?: (boolean | "false" | "true") | undefined;
        "aria-relevant"?: "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text" | "text additions" | "text removals" | undefined | undefined;
        "aria-required"?: (boolean | "false" | "true") | undefined;
        "aria-roledescription"?: string | undefined | undefined;
        "aria-rowcount"?: number | undefined | undefined;
        "aria-rowindex"?: number | undefined | undefined;
        "aria-rowindextext"?: string | undefined | undefined;
        "aria-rowspan"?: number | undefined | undefined;
        "aria-selected"?: (boolean | "false" | "true") | undefined;
        "aria-setsize"?: number | undefined | undefined;
        "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined | undefined;
        "aria-valuemax"?: number | undefined | undefined;
        "aria-valuemin"?: number | undefined | undefined;
        "aria-valuenow"?: number | undefined | undefined;
        "aria-valuetext"?: string | undefined | undefined;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
        onBlur?: (import("react").FocusEventHandler<HTMLInputElement> & import("react").FocusEventHandler<HTMLInputElement | HTMLSelectElement>) | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onResize?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onResizeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDrag?: ((dragProps: import("../../input-control/types").DragProps) => void) | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnd?: ((dragProps: import("../../input-control/types").DragProps) => void) | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragStart?: ((dragProps: import("../../input-control/types").DragProps) => void) | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOut?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOver?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLInputElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLInputElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLInputElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLInputElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLInputElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLInputElement> | undefined;
        key?: import("react").Key | null | undefined;
        defaultChecked?: boolean | undefined | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined | undefined;
        accessKey?: string | undefined | undefined;
        autoFocus?: boolean | undefined | undefined;
        contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
        contextMenu?: string | undefined | undefined;
        dir?: string | undefined | undefined;
        draggable?: (boolean | "false" | "true") | undefined;
        nonce?: string | undefined | undefined;
        spellCheck?: (boolean | "false" | "true") | undefined;
        radioGroup?: string | undefined | undefined;
        about?: string | undefined | undefined;
        datatype?: string | undefined | undefined;
        inlist?: any;
        prefix?: import("react").ReactNode;
        property?: string | undefined | undefined;
        rel?: string | undefined | undefined;
        resource?: string | undefined | undefined;
        rev?: string | undefined | undefined;
        typeof?: string | undefined | undefined;
        vocab?: string | undefined | undefined;
        autoCapitalize?: string | undefined | undefined;
        autoCorrect?: string | undefined | undefined;
        autoSave?: string | undefined | undefined;
        itemProp?: string | undefined | undefined;
        itemScope?: boolean | undefined | undefined;
        itemType?: string | undefined | undefined;
        itemID?: string | undefined | undefined;
        itemRef?: string | undefined | undefined;
        results?: number | undefined | undefined;
        security?: string | undefined | undefined;
        unselectable?: "on" | "off" | undefined | undefined;
        inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined | undefined;
        is?: string | undefined | undefined;
        formAction?: string | undefined;
        formEncType?: string | undefined | undefined;
        formMethod?: string | undefined | undefined;
        formNoValidate?: boolean | undefined | undefined;
        formTarget?: string | undefined | undefined;
        value?: number | string | undefined;
        autoComplete?: import("react").HTMLInputAutoCompleteAttribute | undefined;
        maxLength?: number | undefined | undefined;
        minLength?: number | undefined | undefined;
        placeholder?: string | undefined | undefined;
        readOnly?: boolean | undefined | undefined;
        required?: boolean | undefined;
        src?: string | undefined | undefined;
        alt?: string | undefined | undefined;
        accept?: string | undefined | undefined;
        capture?: boolean | "user" | "environment" | undefined | undefined;
        checked?: boolean | undefined | undefined;
        enterKeyHint?: "enter" | "done" | "go" | "next" | "previous" | "search" | "send" | undefined | undefined;
        list?: string | undefined | undefined;
        step?: string | number | undefined;
        onValidate?: ((nextValue: string, event?: import("react").SyntheticEvent<HTMLInputElement>) => void) | undefined;
        __next36pxDefaultSize?: boolean | undefined;
        __next40pxDefaultSize?: boolean | undefined;
        __shouldNotWarnDeprecated36pxSize?: boolean | undefined;
        __unstableInputWidth?: import("csstype").Property.Width<string | number> | undefined;
        hideLabelFromVision?: boolean | undefined;
        labelPosition?: import("../../input-control/types").LabelPosition | undefined;
        dragDirection?: import("../../input-control/types").DragDirection | undefined;
        dragThreshold?: number | undefined;
        isDragEnabled?: boolean | undefined;
        isPressEnterToChange?: boolean | undefined;
        __unstableStateReducer?: import("../../input-control/reducer/state").StateReducer | undefined;
        hideHTMLArrows?: boolean | undefined;
        isShiftStepEnabled?: boolean | undefined;
        shiftStep?: number | undefined;
        spinFactor?: number | undefined;
        disableUnits?: boolean | undefined;
        unit?: string | undefined;
        isUnitSelectTabbable?: boolean | undefined;
        isResetValueOnUnitChange?: boolean | undefined;
        onUnitChange?: import("../../unit-control/types").UnitControlOnChangeCallback | undefined;
    };
    label?: string;
    onChange: (next: import("../types").BoxControlValue) => void;
    resetValues?: import("../types").BoxControlValue;
    sides?: readonly (keyof import("../types").BoxControlValue | "horizontal" | "vertical")[];
    splitOnAxis?: boolean;
    values?: import("../types").BoxControlValue;
    __next40pxDefaultSize?: boolean;
    presets?: import("../types").Preset[];
    presetKey?: string;
}>;
export declare const AxialControlsWithSingleSide: import("@storybook/csf").AnnotatedStoryFn<import("@storybook/react").ReactRenderer, Pick<import("../../unit-control/types").UnitControlProps, "units"> & {
    onMouseOver?: import("../../unit-control/types").UnitControlProps["onMouseOver"];
    onMouseOut?: import("../../unit-control/types").UnitControlProps["onMouseOut"];
} & {
    allowReset?: boolean;
    id?: string;
    inputProps?: {
        hidden?: boolean | undefined | undefined;
        color?: string | undefined | undefined;
        content?: string | undefined | undefined;
        size?: import("../../input-control/types").Size | undefined;
        style?: import("react").CSSProperties | undefined;
        help?: import("react").ReactNode;
        height?: number | string | undefined | undefined;
        translate?: "yes" | "no" | undefined | undefined;
        width?: number | string | undefined | undefined;
        multiple?: boolean | undefined | undefined;
        disabled?: boolean | undefined;
        form?: string | undefined | undefined;
        slot?: string | undefined | undefined;
        title?: string | undefined | undefined;
        pattern?: string | undefined | undefined;
        suppressHydrationWarning?: boolean | undefined | undefined;
        className?: string | undefined | undefined;
        id?: string | undefined | undefined;
        lang?: string | undefined | undefined;
        max?: number | undefined;
        min?: number | undefined;
        name?: string | undefined | undefined;
        role?: import("react").AriaRole | undefined;
        tabIndex?: number | undefined | undefined;
        "aria-activedescendant"?: string | undefined | undefined;
        "aria-atomic"?: (boolean | "false" | "true") | undefined;
        "aria-autocomplete"?: "none" | "inline" | "list" | "both" | undefined | undefined;
        "aria-braillelabel"?: string | undefined | undefined;
        "aria-brailleroledescription"?: string | undefined | undefined;
        "aria-busy"?: (boolean | "false" | "true") | undefined;
        "aria-checked"?: boolean | "false" | "mixed" | "true" | undefined | undefined;
        "aria-colcount"?: number | undefined | undefined;
        "aria-colindex"?: number | undefined | undefined;
        "aria-colindextext"?: string | undefined | undefined;
        "aria-colspan"?: number | undefined | undefined;
        "aria-controls"?: string | undefined | undefined;
        "aria-current"?: boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time" | undefined | undefined;
        "aria-describedby"?: string | undefined | undefined;
        "aria-description"?: string | undefined | undefined;
        "aria-details"?: string | undefined | undefined;
        "aria-disabled"?: (boolean | "false" | "true") | undefined;
        "aria-dropeffect"?: "none" | "copy" | "execute" | "link" | "move" | "popup" | undefined | undefined;
        "aria-errormessage"?: string | undefined | undefined;
        "aria-expanded"?: (boolean | "false" | "true") | undefined;
        "aria-flowto"?: string | undefined | undefined;
        "aria-grabbed"?: (boolean | "false" | "true") | undefined;
        "aria-haspopup"?: boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog" | undefined | undefined;
        "aria-hidden"?: (boolean | "false" | "true") | undefined;
        "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined | undefined;
        "aria-keyshortcuts"?: string | undefined | undefined;
        "aria-label"?: string | undefined | undefined;
        "aria-labelledby"?: string | undefined | undefined;
        "aria-level"?: number | undefined | undefined;
        "aria-live"?: "off" | "assertive" | "polite" | undefined | undefined;
        "aria-modal"?: (boolean | "false" | "true") | undefined;
        "aria-multiline"?: (boolean | "false" | "true") | undefined;
        "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
        "aria-orientation"?: "horizontal" | "vertical" | undefined | undefined;
        "aria-owns"?: string | undefined | undefined;
        "aria-placeholder"?: string | undefined | undefined;
        "aria-posinset"?: number | undefined | undefined;
        "aria-pressed"?: boolean | "false" | "mixed" | "true" | undefined | undefined;
        "aria-readonly"?: (boolean | "false" | "true") | undefined;
        "aria-relevant"?: "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text" | "text additions" | "text removals" | undefined | undefined;
        "aria-required"?: (boolean | "false" | "true") | undefined;
        "aria-roledescription"?: string | undefined | undefined;
        "aria-rowcount"?: number | undefined | undefined;
        "aria-rowindex"?: number | undefined | undefined;
        "aria-rowindextext"?: string | undefined | undefined;
        "aria-rowspan"?: number | undefined | undefined;
        "aria-selected"?: (boolean | "false" | "true") | undefined;
        "aria-setsize"?: number | undefined | undefined;
        "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined | undefined;
        "aria-valuemax"?: number | undefined | undefined;
        "aria-valuemin"?: number | undefined | undefined;
        "aria-valuenow"?: number | undefined | undefined;
        "aria-valuetext"?: string | undefined | undefined;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
        onBlur?: (import("react").FocusEventHandler<HTMLInputElement> & import("react").FocusEventHandler<HTMLInputElement | HTMLSelectElement>) | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onResize?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onResizeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDrag?: ((dragProps: import("../../input-control/types").DragProps) => void) | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnd?: ((dragProps: import("../../input-control/types").DragProps) => void) | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragStart?: ((dragProps: import("../../input-control/types").DragProps) => void) | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOut?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOver?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLInputElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLInputElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLInputElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLInputElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLInputElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLInputElement> | undefined;
        key?: import("react").Key | null | undefined;
        defaultChecked?: boolean | undefined | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined | undefined;
        accessKey?: string | undefined | undefined;
        autoFocus?: boolean | undefined | undefined;
        contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
        contextMenu?: string | undefined | undefined;
        dir?: string | undefined | undefined;
        draggable?: (boolean | "false" | "true") | undefined;
        nonce?: string | undefined | undefined;
        spellCheck?: (boolean | "false" | "true") | undefined;
        radioGroup?: string | undefined | undefined;
        about?: string | undefined | undefined;
        datatype?: string | undefined | undefined;
        inlist?: any;
        prefix?: import("react").ReactNode;
        property?: string | undefined | undefined;
        rel?: string | undefined | undefined;
        resource?: string | undefined | undefined;
        rev?: string | undefined | undefined;
        typeof?: string | undefined | undefined;
        vocab?: string | undefined | undefined;
        autoCapitalize?: string | undefined | undefined;
        autoCorrect?: string | undefined | undefined;
        autoSave?: string | undefined | undefined;
        itemProp?: string | undefined | undefined;
        itemScope?: boolean | undefined | undefined;
        itemType?: string | undefined | undefined;
        itemID?: string | undefined | undefined;
        itemRef?: string | undefined | undefined;
        results?: number | undefined | undefined;
        security?: string | undefined | undefined;
        unselectable?: "on" | "off" | undefined | undefined;
        inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined | undefined;
        is?: string | undefined | undefined;
        formAction?: string | undefined;
        formEncType?: string | undefined | undefined;
        formMethod?: string | undefined | undefined;
        formNoValidate?: boolean | undefined | undefined;
        formTarget?: string | undefined | undefined;
        value?: number | string | undefined;
        autoComplete?: import("react").HTMLInputAutoCompleteAttribute | undefined;
        maxLength?: number | undefined | undefined;
        minLength?: number | undefined | undefined;
        placeholder?: string | undefined | undefined;
        readOnly?: boolean | undefined | undefined;
        required?: boolean | undefined;
        src?: string | undefined | undefined;
        alt?: string | undefined | undefined;
        accept?: string | undefined | undefined;
        capture?: boolean | "user" | "environment" | undefined | undefined;
        checked?: boolean | undefined | undefined;
        enterKeyHint?: "enter" | "done" | "go" | "next" | "previous" | "search" | "send" | undefined | undefined;
        list?: string | undefined | undefined;
        step?: string | number | undefined;
        onValidate?: ((nextValue: string, event?: import("react").SyntheticEvent<HTMLInputElement>) => void) | undefined;
        __next36pxDefaultSize?: boolean | undefined;
        __next40pxDefaultSize?: boolean | undefined;
        __shouldNotWarnDeprecated36pxSize?: boolean | undefined;
        __unstableInputWidth?: import("csstype").Property.Width<string | number> | undefined;
        hideLabelFromVision?: boolean | undefined;
        labelPosition?: import("../../input-control/types").LabelPosition | undefined;
        dragDirection?: import("../../input-control/types").DragDirection | undefined;
        dragThreshold?: number | undefined;
        isDragEnabled?: boolean | undefined;
        isPressEnterToChange?: boolean | undefined;
        __unstableStateReducer?: import("../../input-control/reducer/state").StateReducer | undefined;
        hideHTMLArrows?: boolean | undefined;
        isShiftStepEnabled?: boolean | undefined;
        shiftStep?: number | undefined;
        spinFactor?: number | undefined;
        disableUnits?: boolean | undefined;
        unit?: string | undefined;
        isUnitSelectTabbable?: boolean | undefined;
        isResetValueOnUnitChange?: boolean | undefined;
        onUnitChange?: import("../../unit-control/types").UnitControlOnChangeCallback | undefined;
    };
    label?: string;
    onChange: (next: import("../types").BoxControlValue) => void;
    resetValues?: import("../types").BoxControlValue;
    sides?: readonly (keyof import("../types").BoxControlValue | "horizontal" | "vertical")[];
    splitOnAxis?: boolean;
    values?: import("../types").BoxControlValue;
    __next40pxDefaultSize?: boolean;
    presets?: import("../types").Preset[];
    presetKey?: string;
}>;
export declare const ControlWithPresets: import("@storybook/csf").AnnotatedStoryFn<import("@storybook/react").ReactRenderer, Pick<import("../../unit-control/types").UnitControlProps, "units"> & {
    onMouseOver?: import("../../unit-control/types").UnitControlProps["onMouseOver"];
    onMouseOut?: import("../../unit-control/types").UnitControlProps["onMouseOut"];
} & {
    allowReset?: boolean;
    id?: string;
    inputProps?: {
        hidden?: boolean | undefined | undefined;
        color?: string | undefined | undefined;
        content?: string | undefined | undefined;
        size?: import("../../input-control/types").Size | undefined;
        style?: import("react").CSSProperties | undefined;
        help?: import("react").ReactNode;
        height?: number | string | undefined | undefined;
        translate?: "yes" | "no" | undefined | undefined;
        width?: number | string | undefined | undefined;
        multiple?: boolean | undefined | undefined;
        disabled?: boolean | undefined;
        form?: string | undefined | undefined;
        slot?: string | undefined | undefined;
        title?: string | undefined | undefined;
        pattern?: string | undefined | undefined;
        suppressHydrationWarning?: boolean | undefined | undefined;
        className?: string | undefined | undefined;
        id?: string | undefined | undefined;
        lang?: string | undefined | undefined;
        max?: number | undefined;
        min?: number | undefined;
        name?: string | undefined | undefined;
        role?: import("react").AriaRole | undefined;
        tabIndex?: number | undefined | undefined;
        "aria-activedescendant"?: string | undefined | undefined;
        "aria-atomic"?: (boolean | "false" | "true") | undefined;
        "aria-autocomplete"?: "none" | "inline" | "list" | "both" | undefined | undefined;
        "aria-braillelabel"?: string | undefined | undefined;
        "aria-brailleroledescription"?: string | undefined | undefined;
        "aria-busy"?: (boolean | "false" | "true") | undefined;
        "aria-checked"?: boolean | "false" | "mixed" | "true" | undefined | undefined;
        "aria-colcount"?: number | undefined | undefined;
        "aria-colindex"?: number | undefined | undefined;
        "aria-colindextext"?: string | undefined | undefined;
        "aria-colspan"?: number | undefined | undefined;
        "aria-controls"?: string | undefined | undefined;
        "aria-current"?: boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time" | undefined | undefined;
        "aria-describedby"?: string | undefined | undefined;
        "aria-description"?: string | undefined | undefined;
        "aria-details"?: string | undefined | undefined;
        "aria-disabled"?: (boolean | "false" | "true") | undefined;
        "aria-dropeffect"?: "none" | "copy" | "execute" | "link" | "move" | "popup" | undefined | undefined;
        "aria-errormessage"?: string | undefined | undefined;
        "aria-expanded"?: (boolean | "false" | "true") | undefined;
        "aria-flowto"?: string | undefined | undefined;
        "aria-grabbed"?: (boolean | "false" | "true") | undefined;
        "aria-haspopup"?: boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog" | undefined | undefined;
        "aria-hidden"?: (boolean | "false" | "true") | undefined;
        "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined | undefined;
        "aria-keyshortcuts"?: string | undefined | undefined;
        "aria-label"?: string | undefined | undefined;
        "aria-labelledby"?: string | undefined | undefined;
        "aria-level"?: number | undefined | undefined;
        "aria-live"?: "off" | "assertive" | "polite" | undefined | undefined;
        "aria-modal"?: (boolean | "false" | "true") | undefined;
        "aria-multiline"?: (boolean | "false" | "true") | undefined;
        "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
        "aria-orientation"?: "horizontal" | "vertical" | undefined | undefined;
        "aria-owns"?: string | undefined | undefined;
        "aria-placeholder"?: string | undefined | undefined;
        "aria-posinset"?: number | undefined | undefined;
        "aria-pressed"?: boolean | "false" | "mixed" | "true" | undefined | undefined;
        "aria-readonly"?: (boolean | "false" | "true") | undefined;
        "aria-relevant"?: "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text" | "text additions" | "text removals" | undefined | undefined;
        "aria-required"?: (boolean | "false" | "true") | undefined;
        "aria-roledescription"?: string | undefined | undefined;
        "aria-rowcount"?: number | undefined | undefined;
        "aria-rowindex"?: number | undefined | undefined;
        "aria-rowindextext"?: string | undefined | undefined;
        "aria-rowspan"?: number | undefined | undefined;
        "aria-selected"?: (boolean | "false" | "true") | undefined;
        "aria-setsize"?: number | undefined | undefined;
        "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined | undefined;
        "aria-valuemax"?: number | undefined | undefined;
        "aria-valuemin"?: number | undefined | undefined;
        "aria-valuenow"?: number | undefined | undefined;
        "aria-valuetext"?: string | undefined | undefined;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
        onBlur?: (import("react").FocusEventHandler<HTMLInputElement> & import("react").FocusEventHandler<HTMLInputElement | HTMLSelectElement>) | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onResize?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onResizeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDrag?: ((dragProps: import("../../input-control/types").DragProps) => void) | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnd?: ((dragProps: import("../../input-control/types").DragProps) => void) | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragStart?: ((dragProps: import("../../input-control/types").DragProps) => void) | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOut?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOver?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLInputElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLInputElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLInputElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLInputElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLInputElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLInputElement> | undefined;
        key?: import("react").Key | null | undefined;
        defaultChecked?: boolean | undefined | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined | undefined;
        accessKey?: string | undefined | undefined;
        autoFocus?: boolean | undefined | undefined;
        contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
        contextMenu?: string | undefined | undefined;
        dir?: string | undefined | undefined;
        draggable?: (boolean | "false" | "true") | undefined;
        nonce?: string | undefined | undefined;
        spellCheck?: (boolean | "false" | "true") | undefined;
        radioGroup?: string | undefined | undefined;
        about?: string | undefined | undefined;
        datatype?: string | undefined | undefined;
        inlist?: any;
        prefix?: import("react").ReactNode;
        property?: string | undefined | undefined;
        rel?: string | undefined | undefined;
        resource?: string | undefined | undefined;
        rev?: string | undefined | undefined;
        typeof?: string | undefined | undefined;
        vocab?: string | undefined | undefined;
        autoCapitalize?: string | undefined | undefined;
        autoCorrect?: string | undefined | undefined;
        autoSave?: string | undefined | undefined;
        itemProp?: string | undefined | undefined;
        itemScope?: boolean | undefined | undefined;
        itemType?: string | undefined | undefined;
        itemID?: string | undefined | undefined;
        itemRef?: string | undefined | undefined;
        results?: number | undefined | undefined;
        security?: string | undefined | undefined;
        unselectable?: "on" | "off" | undefined | undefined;
        inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined | undefined;
        is?: string | undefined | undefined;
        formAction?: string | undefined;
        formEncType?: string | undefined | undefined;
        formMethod?: string | undefined | undefined;
        formNoValidate?: boolean | undefined | undefined;
        formTarget?: string | undefined | undefined;
        value?: number | string | undefined;
        autoComplete?: import("react").HTMLInputAutoCompleteAttribute | undefined;
        maxLength?: number | undefined | undefined;
        minLength?: number | undefined | undefined;
        placeholder?: string | undefined | undefined;
        readOnly?: boolean | undefined | undefined;
        required?: boolean | undefined;
        src?: string | undefined | undefined;
        alt?: string | undefined | undefined;
        accept?: string | undefined | undefined;
        capture?: boolean | "user" | "environment" | undefined | undefined;
        checked?: boolean | undefined | undefined;
        enterKeyHint?: "enter" | "done" | "go" | "next" | "previous" | "search" | "send" | undefined | undefined;
        list?: string | undefined | undefined;
        step?: string | number | undefined;
        onValidate?: ((nextValue: string, event?: import("react").SyntheticEvent<HTMLInputElement>) => void) | undefined;
        __next36pxDefaultSize?: boolean | undefined;
        __next40pxDefaultSize?: boolean | undefined;
        __shouldNotWarnDeprecated36pxSize?: boolean | undefined;
        __unstableInputWidth?: import("csstype").Property.Width<string | number> | undefined;
        hideLabelFromVision?: boolean | undefined;
        labelPosition?: import("../../input-control/types").LabelPosition | undefined;
        dragDirection?: import("../../input-control/types").DragDirection | undefined;
        dragThreshold?: number | undefined;
        isDragEnabled?: boolean | undefined;
        isPressEnterToChange?: boolean | undefined;
        __unstableStateReducer?: import("../../input-control/reducer/state").StateReducer | undefined;
        hideHTMLArrows?: boolean | undefined;
        isShiftStepEnabled?: boolean | undefined;
        shiftStep?: number | undefined;
        spinFactor?: number | undefined;
        disableUnits?: boolean | undefined;
        unit?: string | undefined;
        isUnitSelectTabbable?: boolean | undefined;
        isResetValueOnUnitChange?: boolean | undefined;
        onUnitChange?: import("../../unit-control/types").UnitControlOnChangeCallback | undefined;
    };
    label?: string;
    onChange: (next: import("../types").BoxControlValue) => void;
    resetValues?: import("../types").BoxControlValue;
    sides?: readonly (keyof import("../types").BoxControlValue | "horizontal" | "vertical")[];
    splitOnAxis?: boolean;
    values?: import("../types").BoxControlValue;
    __next40pxDefaultSize?: boolean;
    presets?: import("../types").Preset[];
    presetKey?: string;
}>;
//# sourceMappingURL=index.story.d.ts.map